
==================== FINAL INTERFACE ====================
2017-12-26 08:31:15.3679186 UTC

interface main@main:Main 8002
  interface hash: 210e777cc3d7cb21b0312d8999e93d47
  ABI hash: 152d9b018dbe435fc6a6c9ab075e31e1
  export-list hash: 4acb70db0a209aa517d829f1509ade5b
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 5242ec90fd55ffa6ef7863882667a7bd
  sig of: Nothing
  used TH splices: False
  where
exports:
  Main.allWords
  Main.alreadyGuessed
  Main.charInWord
  Main.fillInCharacter
  Main.freshPuzzle
  Main.gameOver
  Main.gameWin
  Main.gameWords
  Main.handleGuess
  Main.main
  Main.maxWordLenght
  Main.minWordLenght
  Main.randomWord
  Main.randomWord'
  Main.renderPuzzleChar
  Main.runGame
  Main.Puzzle{Main.Puzzle}
  Main.WordList
module dependencies:
package dependencies: Win32-2.3.1.1@Win32-2.3.1.1
                      array-0.5.1.1@array-0.5.1.1 base-4.9.1.0*
                      deepseq-1.4.2.0@deepseq-1.4.2.0 ghc-prim-0.5.0.0
                      integer-gmp-1.0.0.1 random-1.1@random-1.1-9tceXaeYIMZ4JrKq20Egog*
                      time-1.6.0.1@time-1.6.0.1
orphans: base-4.9.1.0:GHC.Base base-4.9.1.0:GHC.Float
         time-1.6.0.1@time-1.6.0.1:Data.Time.Calendar.Gregorian
         time-1.6.0.1@time-1.6.0.1:Data.Time.Format.Parse
         time-1.6.0.1@time-1.6.0.1:Data.Time.LocalTime.LocalTime
family instance modules: base-4.9.1.0:Control.Applicative
                         base-4.9.1.0:Data.Complex base-4.9.1.0:Data.Either
                         base-4.9.1.0:Data.Functor.Const base-4.9.1.0:Data.Functor.Identity
                         base-4.9.1.0:Data.List.NonEmpty base-4.9.1.0:Data.Monoid
                         base-4.9.1.0:Data.Semigroup base-4.9.1.0:Data.Type.Equality
                         base-4.9.1.0:Data.Version base-4.9.1.0:Data.Void
                         base-4.9.1.0:GHC.Exts base-4.9.1.0:GHC.Generics
                         base-4.9.1.0:GHC.IO.Exception base-4.9.1.0:GHC.TypeLits
import  -/  base-4.9.1.0:Control.Monad f915f187cea611986ebb12dbc69279ab
import  -/  base-4.9.1.0:Data.Char c49b58282af11503cc838e1052cf6b83
import  -/  base-4.9.1.0:Data.Foldable 254e836c2d813d34e47feb29bb8d40ed
import  -/  base-4.9.1.0:Data.List 7349774f430841349c90dfd1144aea97
import  -/  base-4.9.1.0:Data.Maybe ecf0c6f81372d9b58b142d5e758ea51b
import  -/  base-4.9.1.0:Data.OldList c9282ee91951bdcbd918d2960562c007
import  -/  base-4.9.1.0:GHC.Base 4caea1123ecf4b46e27cbccd6d279377
import  -/  base-4.9.1.0:GHC.IO.Handle cb8bbcf28331624bf008e1abd21fcddd
import  -/  base-4.9.1.0:GHC.IO.Handle.FD 13bd8641d665b1ca96fbeeb8bdfa3638
import  -/  base-4.9.1.0:GHC.IO.Handle.Types 638c6e55b150de2630213031097f67d4
import  -/  base-4.9.1.0:GHC.List d11eb227c1c6fbfd89bb781d72eaea0d
import  -/  base-4.9.1.0:GHC.Num 38b8aac8807c096c7f3ca3c1eff02939
import  -/  base-4.9.1.0:GHC.Show eca5834daba3b6a2bbbe64ab52056707
import  -/  base-4.9.1.0:GHC.Unicode 7b64ed854a326c2c5bb224f237ed4a0b
import  -/  base-4.9.1.0:Prelude 74b3e204395920329f6de9d97206abe9
import  -/  base-4.9.1.0:System.Exit c7285b50307ae5b742cc92ebeb7b2666
import  -/  base-4.9.1.0:System.IO 5daf3f384209c11d9566e3409af8ec5d
import  -/  ghc-prim-0.5.0.0:GHC.Classes 16d48e012d23eaef9bca91ccdd572c02
import  -/  ghc-prim-0.5.0.0:GHC.Types 89f8de4f08018c9177c98d979eae0e45
import  -/  random-1.1@random-1.1-9tceXaeYIMZ4JrKq20Egog:System.Random 4c90117f915e12291e0c5f588320bf66
1219ac71a025d1d1e8288947a5a5fb3c
  $fShowPuzzle :: GHC.Show.Show Main.Puzzle
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Main.Puzzle
                  Main.$fShowPuzzle_$cshowsPrec
                  Main.$fShowPuzzle_$cshow
                  Main.$fShowPuzzle_$cshowList -}
1219ac71a025d1d1e8288947a5a5fb3c
  $fShowPuzzle1 :: Main.Puzzle -> GHC.Base.String -> [GHC.Types.Char]
  {- Arity: 2, HasNoCafRefs,
     Unfolding: (\ (x :: Main.Puzzle) (s :: GHC.Base.String)[OneShot] ->
                 case x of ww { Main.Puzzle ww1 ww2 ww3 ->
                 GHC.Base.++ @ GHC.Types.Char (Main.$w$cshow ww2 ww3) s }) -}
af8b2509c8f6218cd97ea6d88fc91f93
  $fShowPuzzle2 :: GHC.Types.Char
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.C# ' '#) -}
9779640f94d9f1e0b4077b79422f5b3a
  $fShowPuzzle3 :: (GHC.Types.Char -> b -> b) -> b -> b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,C(C1(U))><L,U>,
     Unfolding: (\ @ b
                   (c :: GHC.Types.Char -> b -> b)[OneShot]
                   (n :: b)[OneShot] ->
                 GHC.CString.unpackFoldrCString#
                   @ b
                   " Wrong guesses so far: "#
                   c
                   n) -}
1219ac71a025d1d1e8288947a5a5fb3c
  $fShowPuzzle_$cshow :: Main.Puzzle -> GHC.Base.String
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LSL),1*U(A,1*U,U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Main.Puzzle) ->
                 case w of ww { Main.Puzzle ww1 ww2 ww3 ->
                 Main.$w$cshow ww2 ww3 }) -}
1219ac71a025d1d1e8288947a5a5fb3c
  $fShowPuzzle_$cshowList :: [Main.Puzzle] -> GHC.Show.ShowS
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,U>,
     Unfolding: (\ (ls :: [Main.Puzzle]) (s :: GHC.Base.String) ->
                 GHC.Show.showList__ @ Main.Puzzle Main.$fShowPuzzle1 ls s) -}
1219ac71a025d1d1e8288947a5a5fb3c
  $fShowPuzzle_$cshowsPrec ::
    GHC.Types.Int -> Main.Puzzle -> GHC.Show.ShowS
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,A><S(LSL),1*U(A,1*U,U)><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ (ds :: GHC.Types.Int)
                   (x :: Main.Puzzle)
                   (s :: GHC.Base.String) ->
                 GHC.Base.augment
                   @ GHC.Types.Char
                   (\ @ b
                      (c :: GHC.Types.Char -> b -> b)[OneShot]
                      (n :: b)[OneShot] ->
                    GHC.Base.foldr
                      @ GHC.Types.Char
                      @ b
                      c
                      n
                      (Main.$fShowPuzzle_$cshow x))
                   s) -}
563a88b7bd78be50ca7e48e1c689e5f3
  $tc'Puzzle :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   3355915762698541313##
                   14556823112734747473##
                   Main.$trModule
                   Main.$tc'Puzzle1) -}
de85fd3ec53835ea43a4aa38197e049a
  $tc'Puzzle1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Puzzle"#) -}
dd3dad1a8e7d6ea0185c41d0f418859f
  $tcPuzzle :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   4184397067194358297##
                   5931153594655639713##
                   Main.$trModule
                   Main.$tcPuzzle1) -}
9dd25e46b76df9a6ad7069441e80bd3f
  $tcPuzzle1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Puzzle"#) -}
d6831ef04cb9301b090dfae6f7bb7ec7
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module Main.$trModule2 Main.$trModule1) -}
847d9fc3b8e6f0b424199f36b4999bb2
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Main"#) -}
24ef6042833e75ffd7aa98b83ecca98d
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "main"#) -}
59ce04355a277a1d3e61d30e84326dc7
  $w$cshow ::
    [GHC.Base.Maybe GHC.Types.Char]
    -> [GHC.Types.Char] -> GHC.Base.String
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,U>, Inline: [0],
     Unfolding: (\ (ww :: [GHC.Base.Maybe GHC.Types.Char])
                   (ww1 :: [GHC.Types.Char]) ->
                 case GHC.Base.map
                        @ (GHC.Base.Maybe GHC.Types.Char)
                        @ GHC.Types.Char
                        Main.renderPuzzleChar
                        ww of wild {
                   []
                   -> Main.$fShowPuzzle3
                        @ [GHC.Types.Char]
                        (GHC.Types.: @ GHC.Types.Char)
                        ww1
                   : x xs
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        (GHC.Types.:
                           @ GHC.Types.Char
                           x
                           (Data.OldList.prependToAll @ GHC.Types.Char Main.$fShowPuzzle2 xs))
                        (Main.$fShowPuzzle3
                           @ [GHC.Types.Char]
                           (GHC.Types.: @ GHC.Types.Char)
                           ww1) }) -}
384e0d92806f98e360cf7f4fe0bac09c
  $wgameOver ::
    GHC.Base.String
    -> [GHC.Types.Char]
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 3, Strictness: <L,U><S,1*U><S,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Base.String)
                   (ww1 :: [GHC.Types.Char])
                   (w :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.List.$wlenAcc @ GHC.Types.Char ww1 0# of ww2 { DEFAULT ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.># ww2 7#) of wild {
                   GHC.Types.False -> (# w, GHC.Tuple.() #)
                   GHC.Types.True
                   -> case GHC.IO.Handle.Text.hPutStr2
                             GHC.IO.Handle.FD.stdout
                             (GHC.CString.unpackAppendCString# "You lose! The word was: "# ww)
                             GHC.Types.True
                             w of ds1 { (#,#) ipv ipv1 ->
                      System.Exit.exitSuccess1 @ () ipv } } }) -}
e7bcaddbb9b9ffadacf725ce1ea0c05c
  $wgameWin ::
    [GHC.Base.Maybe GHC.Types.Char]
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 2, Strictness: <S,1*U><S,U>, Inline: [0],
     Unfolding: (\ (ww :: [GHC.Base.Maybe GHC.Types.Char])
                   (w :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case (Main.gameWin_go ww) `cast` (Data.Monoid.N:All[0]) of wild {
                   GHC.Types.False -> (# w, GHC.Tuple.() #)
                   GHC.Types.True
                   -> case GHC.IO.Handle.Text.hPutStr2
                             GHC.IO.Handle.FD.stdout
                             Main.gameWin2
                             GHC.Types.True
                             w of ds1 { (#,#) ipv ipv1 ->
                      System.Exit.exitSuccess1 @ () ipv } }) -}
f934123ac2c14d2bac3878fe8cea24ed
  $whandleGuess ::
    GHC.Base.String
    -> [GHC.Base.Maybe GHC.Types.Char]
    -> [GHC.Types.Char]
    -> GHC.Types.Char
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Main.Puzzle #)
  {- Arity: 5, Strictness: <L,U><L,U><S,U><L,U(U)><S,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Base.String)
                   (ww1 :: [GHC.Base.Maybe GHC.Types.Char])
                   (ww2 :: [GHC.Types.Char])
                   (w :: GHC.Types.Char)
                   (w1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.List.elem
                        @ GHC.Types.Char
                        GHC.Classes.$fEqChar
                        w
                        ww2 of wild {
                   GHC.Types.False
                   -> case GHC.List.elem
                             @ GHC.Types.Char
                             GHC.Classes.$fEqChar
                             w
                             ww of wild1 {
                        GHC.Types.False
                        -> case GHC.IO.Handle.Text.hPutStr2
                                  GHC.IO.Handle.FD.stdout
                                  Main.handleGuess3
                                  GHC.Types.True
                                  w1 of ds1 { (#,#) ipv ipv1 ->
                           (# ipv,
                              Main.Puzzle ww ww1 (GHC.Types.: @ GHC.Types.Char w ww2) #) }
                        GHC.Types.True
                        -> case GHC.IO.Handle.Text.hPutStr2
                                  GHC.IO.Handle.FD.stdout
                                  (GHC.CString.unpackAppendCString#
                                     "Good guess, filling the positions of "#
                                     (GHC.Types.:
                                        @ GHC.Types.Char
                                        w
                                        (GHC.Types.[] @ GHC.Types.Char)))
                                  GHC.Types.True
                                  w1 of ds1 { (#,#) ipv ipv1 ->
                           (# ipv,
                              Main.Puzzle
                                ww
                                (GHC.List.zipWith
                                   @ GHC.Types.Char
                                   @ (GHC.Base.Maybe GHC.Types.Char)
                                   @ (GHC.Base.Maybe GHC.Types.Char)
                                   (\ (wordElem :: GHC.Types.Char)
                                      (filledInSoFarElem :: GHC.Base.Maybe
                                                              GHC.Types.Char)[OneShot] ->
                                    case w of wild2 { GHC.Types.C# x ->
                                    case wordElem of wild3 { GHC.Types.C# y ->
                                    case GHC.Prim.tagToEnum#
                                           @ GHC.Types.Bool
                                           (GHC.Prim.eqChar# x y) of wild4 {
                                      GHC.Types.False -> filledInSoFarElem
                                      GHC.Types.True -> GHC.Base.Just @ GHC.Types.Char wild3 } } })
                                   ww
                                   ww1)
                                ww2 #) } }
                   GHC.Types.True
                   -> case GHC.IO.Handle.Text.hPutStr2
                             GHC.IO.Handle.FD.stdout
                             Main.handleGuess2
                             GHC.Types.True
                             w1 of ds1 { (#,#) ipv ipv1 ->
                      (# ipv, Main.Puzzle ww ww1 ww2 #) } }) -}
11d03a0d9e907dfb5d6c6bacab852180
  $wrunGame ::
    GHC.Base.String
    -> [GHC.Base.Maybe GHC.Types.Char]
    -> [GHC.Types.Char]
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 4, Strictness: <L,U><L,U><S,U><S,U>, Inline: [0] -}
1219ac71a025d1d1e8288947a5a5fb3c
  data Puzzle
    = Puzzle GHC.Base.String
             [GHC.Base.Maybe GHC.Types.Char]
             [GHC.Types.Char]
18e226540f1083ede38840e062bf7824
  type WordList = [GHC.Base.String]
e87eb27243d9cfe1ef5bf32c2f43d281
  allWords :: GHC.Types.IO Main.WordList
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.allWords1
                  `cast`
                (Sym (GHC.Types.N:IO[0] <Main.WordList>_R)) -}
c81c4834f90ed73f2d32f50bdfb097ca
  allWords1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Main.WordList #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.IO.Handle.FD.openFile1
                        Main.allWords2
                        GHC.IO.IOMode.ReadMode
                        s of ds1 { (#,#) ipv ipv2 ->
                 case GHC.IO.Handle.Text.hGetContents1
                        ipv2
                        ipv of ds2 { (#,#) ipv1 ipv3 ->
                 (# ipv1, Data.OldList.lines ipv3 #) } }) -}
2e893ff608e2343e1d9ca23fb20154fe
  allWords2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "data/dict.txt"#) -}
3a0ca023b6f19e8a8736ee2272f457e8
  alreadyGuessed :: Main.Puzzle -> GHC.Types.Char -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S(LLS),1*U(A,A,1*U)><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ds :: Main.Puzzle) (c :: GHC.Types.Char) ->
                 case ds of wild { Main.Puzzle ds1 ds2 s ->
                 GHC.List.elem @ GHC.Types.Char GHC.Classes.$fEqChar c s }) -}
8cf3bf44811c5ef2cb6c7b03c54d4dea
  charInWord :: Main.Puzzle -> GHC.Types.Char -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S(SLL),1*U(1*U,A,A)><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ds :: Main.Puzzle) (c :: GHC.Types.Char) ->
                 case ds of wild { Main.Puzzle s ds1 ds2 ->
                 GHC.List.elem @ GHC.Types.Char GHC.Classes.$fEqChar c s }) -}
f35f5f2bf6ba573289c24ed5e7241038
  fillInCharacter :: Main.Puzzle -> GHC.Types.Char -> Main.Puzzle
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SLL),1*U(U,U,U)><L,U(U)>m, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Main.Puzzle) (w1 :: GHC.Types.Char) ->
                 case w of ww { Main.Puzzle ww1 ww2 ww3 ->
                 case GHC.List.elem
                        @ GHC.Types.Char
                        GHC.Classes.$fEqChar
                        w1
                        ww1 of wild {
                   GHC.Types.False
                   -> Main.Puzzle ww1 ww2 (GHC.Types.: @ GHC.Types.Char w1 ww3)
                   GHC.Types.True
                   -> Main.Puzzle
                        ww1
                        (GHC.List.zipWith
                           @ GHC.Types.Char
                           @ (GHC.Base.Maybe GHC.Types.Char)
                           @ (GHC.Base.Maybe GHC.Types.Char)
                           (\ (wordElem :: GHC.Types.Char)
                              (filledInSoFarElem :: GHC.Base.Maybe GHC.Types.Char)[OneShot] ->
                            case w1 of wild1 { GHC.Types.C# x ->
                            case wordElem of wild2 { GHC.Types.C# y ->
                            case GHC.Prim.tagToEnum#
                                   @ GHC.Types.Bool
                                   (GHC.Prim.eqChar# x y) of wild3 {
                              GHC.Types.False -> filledInSoFarElem
                              GHC.Types.True -> GHC.Base.Just @ GHC.Types.Char wild2 } } })
                           ww1
                           ww2)
                        ww3 } }) -}
35889314cb96d7f6ca85b6a9d0ff64c9
  freshPuzzle :: GHC.Base.String -> Main.Puzzle
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U>m,
     Unfolding: InlineRule (1, True, False)
                (\ (s :: GHC.Base.String) ->
                 Main.Puzzle
                   s
                   (GHC.Base.build
                      @ (GHC.Base.Maybe GHC.Types.Char)
                      (\ @ b1
                         (c :: GHC.Base.Maybe GHC.Types.Char -> b1 -> b1)[OneShot]
                         (n :: b1)[OneShot] ->
                       GHC.Base.foldr
                         @ GHC.Types.Char
                         @ b1
                         (GHC.Base.mapFB
                            @ (GHC.Base.Maybe GHC.Types.Char)
                            @ b1
                            @ GHC.Types.Char
                            c
                            Main.freshPuzzle1)
                         n
                         s))
                   (GHC.Types.[] @ GHC.Types.Char)) -}
cb1b6124216b1c85d2ad515401b6182f
  freshPuzzle1 :: GHC.Types.Char -> GHC.Base.Maybe GHC.Types.Char
  {- Arity: 1, HasNoCafRefs, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ (ds :: GHC.Types.Char) -> GHC.Base.Nothing @ GHC.Types.Char) -}
a71ff1b52c9a7b98706b135f2f213777
  gameOver :: Main.Puzzle -> GHC.Types.IO ()
  {- Arity: 2, Strictness: <S(LLS),1*U(U,A,1*U)><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.gameOver1
                  `cast`
                (<Main.Puzzle>_R ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
a7345826382f115863038133f41ac2dd
  gameOver1 ::
    Main.Puzzle
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 2, Strictness: <S(LLS),1*U(U,A,1*U)><S,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Main.Puzzle)
                   (w1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case w of ww { Main.Puzzle ww1 ww2 ww3 ->
                 Main.$wgameOver ww1 ww3 w1 }) -}
2ceeb4ef50f506e88bd9a07e63107517
  gameWin :: Main.Puzzle -> GHC.Types.IO ()
  {- Arity: 2, Strictness: <S(LSL),1*U(A,1*U,A)><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.gameWin1
                  `cast`
                (<Main.Puzzle>_R ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
9569633a8feeffaaddcbb447addfac7a
  gameWin1 ::
    Main.Puzzle
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 2, Strictness: <S(LSL),1*U(A,1*U,A)><S,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Main.Puzzle)
                   (w1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case w of ww { Main.Puzzle ww1 ww2 ww3 ->
                 Main.$wgameWin ww2 w1 }) -}
339ecf04e8efdb1bc15fe47b0e5928ec
  gameWin2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "You win!"#) -}
54d7576698b92f3089932e82023ebbab
  gameWin_go :: [GHC.Base.Maybe GHC.Types.Char] -> Data.Monoid.All
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
c98cf37ed360f5e0062065cff6b7f202
  gameWords :: GHC.Types.IO Main.WordList
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.gameWords1
                  `cast`
                (Sym (GHC.Types.N:IO[0] <Main.WordList>_R)) -}
bbca2c2a0af9a0c6842073f110169780
  gameWords1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Main.WordList #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.IO.Handle.FD.openFile1
                        Main.allWords2
                        GHC.IO.IOMode.ReadMode
                        s of ds1 { (#,#) ipv ipv2 ->
                 case GHC.IO.Handle.Text.hGetContents1
                        ipv2
                        ipv of ds2 { (#,#) ipv1 ipv3 ->
                 (# ipv1,
                    GHC.List.filter
                      @ [GHC.Types.Char]
                      Main.gameWords2
                      (Data.OldList.lines ipv3) #) } }) -}
0cbeffd34c8702e3cecd8f2b460558c1
  gameWords2 :: GHC.Base.String -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs,
     Unfolding: (\ (w :: GHC.Base.String) ->
                 case GHC.List.$wlenAcc @ GHC.Types.Char w 0# of ww2 { DEFAULT ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww2 5#) of wild {
                   GHC.Types.False -> GHC.Types.False
                   GHC.Types.True
                   -> GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.<# ww2 9#) } }) -}
f87a42292304f88fa0656e205a320444
  handleGuess ::
    Main.Puzzle -> GHC.Types.Char -> GHC.Types.IO Main.Puzzle
  {- Arity: 3, Strictness: <S(LLS),1*U(U,U,U)><L,U(U)><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.handleGuess1
                  `cast`
                (<Main.Puzzle>_R
                 ->_R <GHC.Types.Char>_R
                 ->_R Sym (GHC.Types.N:IO[0] <Main.Puzzle>_R)) -}
3a572c11967568f785d935ac5939b4b6
  handleGuess1 ::
    Main.Puzzle
    -> GHC.Types.Char
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Main.Puzzle #)
  {- Arity: 3, Strictness: <S(LLS),1*U(U,U,U)><L,U(U)><S,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: Main.Puzzle)
                   (w1 :: GHC.Types.Char)
                   (w2 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case w of ww { Main.Puzzle ww1 ww2 ww3 ->
                 Main.$whandleGuess ww1 ww2 ww3 w1 w2 }) -}
03920fd1266b29ce7368094b7becb405
  handleGuess2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "You already guessed that character, pick something else"#) -}
e92b879852a65bdd25141487f29a378f
  handleGuess3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "Wrong guess, try again"#) -}
2aeba3248f742109a8dac8b02a154553
  main :: GHC.Types.IO ()
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R)) -}
1faafb656b89cdbddb453a07541b312f
  main1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.IO.Handle.FD.openFile1
                        Main.allWords2
                        GHC.IO.IOMode.ReadMode
                        s of ds1 { (#,#) ipv ipv2 ->
                 case GHC.IO.Handle.Text.hGetContents1
                        ipv2
                        ipv of ds2 { (#,#) ipv1 ipv3 ->
                 let {
                   ipv4 :: Main.WordList
                   = GHC.List.filter
                       @ [GHC.Types.Char]
                       Main.gameWords2
                       (Data.OldList.lines ipv3)
                 } in
                 case System.Random.$fRandomInt3
                        (Main.main2,
                         case GHC.List.$wlenAcc
                                @ [GHC.Types.Char]
                                ipv4
                                0# of ww2 { DEFAULT ->
                         GHC.Types.I# (GHC.Prim.-# ww2 1#) })
                        ipv1 of ds3 { (#,#) ipv5 ipv6 ->
                 let {
                   s1 :: GHC.Base.String
                   = case ipv6 of ww { GHC.Types.I# ww1 ->
                     GHC.Base.map
                       @ GHC.Types.Char
                       @ GHC.Types.Char
                       GHC.Unicode.toLower
                       (GHC.List.$w!! @ GHC.Base.String ipv4 ww1) }
                 } in
                 Main.$wrunGame
                   s1
                   (GHC.Base.map
                      @ GHC.Types.Char
                      @ (GHC.Base.Maybe GHC.Types.Char)
                      Main.freshPuzzle1
                      s1)
                   (GHC.Types.[] @ GHC.Types.Char)
                   ipv5 } } }) -}
7380c032ba933cc0a02844d65ff25649
  main2 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0#) -}
742797d885cb3a28d8cf953e252736b7
  main3 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1,
     Unfolding: (GHC.TopHandler.runMainIO1
                   @ ()
                   Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R))) -}
098e05f7b015def0c08ef97d74bf58ae
  maxWordLenght :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 9#) -}
e29d3367606a10458318703add4f86ef
  minWordLenght :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 5#) -}
6c769464e8db979471b9cf7faec5c651
  randomWord :: Main.WordList -> GHC.Types.IO GHC.Base.String
  {- Arity: 2, Strictness: <L,U><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.randomWord1
                  `cast`
                (<Main.WordList>_R
                 ->_R Sym (GHC.Types.N:IO[0] <GHC.Base.String>_R)) -}
d090a22b7bae711bf6f8e89a379eed08
  randomWord' :: GHC.Types.IO GHC.Base.String
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.randomWord'1
                  `cast`
                (Sym (GHC.Types.N:IO[0] <GHC.Base.String>_R)) -}
4ebc11e6f9bc93e29694b29fe58b270a
  randomWord'1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Base.String #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case Main.gameWords1 s of ds1 { (#,#) ipv ipv1 ->
                 Main.randomWord1 ipv1 ipv }) -}
37bfbefbbe53651b55e97900371e89ba
  randomWord1 ::
    Main.WordList
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Base.String #)
  {- Arity: 2, Strictness: <L,U><S,U>,
     Unfolding: (\ (wl :: Main.WordList)
                   (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case System.Random.$fRandomInt3
                        (Main.main2,
                         case GHC.List.$wlenAcc @ [GHC.Types.Char] wl 0# of ww2 { DEFAULT ->
                         GHC.Types.I# (GHC.Prim.-# ww2 1#) })
                        s of ds1 { (#,#) ipv ipv1 ->
                 (# ipv, GHC.List.!! @ GHC.Base.String wl ipv1 #) }) -}
37268b3c8e94067595431b007b280e7b
  renderPuzzleChar :: GHC.Base.Maybe GHC.Types.Char -> GHC.Types.Char
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: GHC.Base.Maybe GHC.Types.Char) ->
                 case ds of wild {
                   GHC.Base.Nothing -> Main.renderPuzzleChar1
                   GHC.Base.Just c -> c }) -}
f1688679037fcea4db43809b03ad893a
  renderPuzzleChar1 :: GHC.Types.Char
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.C# '_'#) -}
22156106f9f02dc782f2f2620a343032
  runGame :: Main.Puzzle -> GHC.Types.IO ()
  {- Arity: 2, Strictness: <S(LLS),U(U,U,U)><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.runGame1
                  `cast`
                (<Main.Puzzle>_R ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
c866cc2ef8cefe420ca2068827d5380e
  runGame1 ::
    Main.Puzzle
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 2, Strictness: <S(LLS),U(U,U,U)><S,U>, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Main.Puzzle)
                   (w1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case w of ww { Main.Puzzle ww1 ww2 ww3 ->
                 Main.$wrunGame ww1 ww2 ww3 w1 }) -}
instance [safe] GHC.Show.Show [Main.Puzzle] = Main.$fShowPuzzle
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

